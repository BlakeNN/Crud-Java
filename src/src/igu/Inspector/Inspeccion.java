/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package igu.Inspector;

/**
 *
 * @author Lucas
 */
import crud.Classes.ContenedorDatos;
import crud.Classes.Conexion;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Lucas
 */
public class Inspeccion extends JFrame {

    public Inspeccion() {
        initComponents();
    }

    private void verificarInspecciones() {
        DefaultTableModel dtm = (DefaultTableModel) inspTable.getModel();
        int filas = dtm.getRowCount();
        java.util.List<Integer> noAprobadas = new java.util.ArrayList<>();

        for (int i = 0; i < filas; i++) {
            Boolean aprobada = (Boolean) dtm.getValueAt(i, 1);
            if (aprobada == null || !aprobada) {
                noAprobadas.add(i + 1);  // sumamos 1 para que sea desde 1 y no desde 0
            }
        }

        int idInspeccion = ContenedorDatos.getInstance().getIdInspeccion();

        try (Connection conn = Conexion.getConexion()) {
            String etapasQuery = "INSERT INTO etapas_inspecciones (`inspeccion_id`, `etapa_id`, `resultado`) VALUES (?, ?, ?)";
            PreparedStatement pst = conn.prepareStatement(etapasQuery);

            for (int i = 0; i < filas; i++) {
                Boolean aprobada = (Boolean) dtm.getValueAt(i, 1);
                String resultado = (aprobada != null && aprobada) ? "aprobado" : "reprobado";

                pst.setInt(1, idInspeccion);
                pst.setInt(2, i + 1);  // id de la etapa: suponiendo que la fila 0 es etapa 1
                pst.setString(3, resultado);
                pst.addBatch();
            }

            pst.executeBatch();  // Ejecuta todos juntos.
            try (Connection conn2 = Conexion.getConexion()) {
                String estadoInspeccion, estadoTurno;

                if (noAprobadas.isEmpty()) {
                    JOptionPane.showMessageDialog(this, "Todas las Revisiones fueron Aprobadas - VTV APROBADA");
                    estadoInspeccion = "aprobada";
                    estadoTurno = "confirmado";
                } else {
                    JOptionPane.showMessageDialog(this, "1 o Mas Revisiones no se Aprobaron - VTV REPROBADA");
                    estadoInspeccion = "reprobada";
                    estadoTurno = "denegado";
                }

                // Actualiza inspecciones
                String updateInspeccion = "UPDATE inspecciones SET estado = ? WHERE id = ?";
                try (PreparedStatement pstInsp = conn2.prepareStatement(updateInspeccion)) {
                    pstInsp.setString(1, estadoInspeccion);
                    pstInsp.setInt(2, idInspeccion);
                    pstInsp.executeUpdate();
                }

                // Actualiza turnos
                String updateTurno = "UPDATE turnos SET estado = ? WHERE id = ?";
                try (PreparedStatement pstTurno = conn2.prepareStatement(updateTurno)) {
                    pstTurno.setString(1, estadoTurno);
                    pstTurno.setInt(2, ContenedorDatos.getInstance().getIdTurno());
                    pstTurno.executeUpdate();
                }

                System.out.println("Inspección y turno actualizados correctamente.");
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Error al guardar etapas: " + e.getMessage());
            }

            System.out.println("Etapas cargadas para la inspección ID: " + idInspeccion);

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error al guardar etapas: " + e.getMessage());
        }
        BuscarTurnoView buscarTurno = new BuscarTurnoView();
        buscarTurno.setVisible(true);
        buscarTurno.setLocationRelativeTo(null);
        dispose();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        inspTable = new javax.swing.JTable();
        inspBtn = new javax.swing.JButton();
        jLabel23 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(0, 153, 0));

        inspTable.setBackground(new java.awt.Color(153, 153, 153));
        inspTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"Revision Aceite",  new Boolean(false)},
                {"Revision Suspension",  new Boolean(false)},
                {"Revision Gases", null}
            },
            new String [] {
                "Revision", "Aprobada"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(inspTable);

        inspBtn.setBackground(new java.awt.Color(153, 153, 153));
        inspBtn.setText("Finalizar VTV");
        inspBtn.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        inspBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inspBtnActionPerformed(evt);
            }
        });

        jLabel23.setFont(new java.awt.Font("Liberation Sans", 1, 24)); // NOI18N
        jLabel23.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel23.setText("Etapas de Revision");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(90, 90, 90)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 420, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(inspBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(185, Short.MAX_VALUE)
                .addComponent(jLabel23, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(185, 185, 185))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(45, 45, 45)
                .addComponent(jLabel23, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 45, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(inspBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(330, 330, 330))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void inspBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inspBtnActionPerformed
        // TODO add your handling code here:
        verificarInspecciones();
    }//GEN-LAST:event_inspBtnActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton inspBtn;
    private javax.swing.JTable inspTable;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
